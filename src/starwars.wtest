import habitantes.*
import planeta.*

describe " test sobre escenario basico: personas y planeta" {
	
	const julieta = new Persona(edad = 42)
	const ana = new Atleta(edad = 25)
	const rosa = new Atleta(edad = 45, cantidadTecnicas = 8)
	const perla = new Atleta(edad = 28, cantidadTecnicas = 4, masaMuscular = 6)
	const monica = new Docente(edad= 45, cantidadCursos = 6)
	const luisa = new Docente(edad= 35, cantidadCursos = 1)
	const triton = new Planeta(habitantes = #{julieta, ana, rosa, perla, monica, luisa})
	
	test "personas: potencia" {
		assert.equals(20, julieta.potencia())
		assert.equals(28, ana.potencia())
		assert.equals(52, rosa.potencia())
		assert.equals(44, perla.potencia())
		assert.equals(20, monica.potencia())
		assert.equals(20, luisa.potencia())
	}
	
	test "personas: inteligencia" {
		assert.equals(8, julieta.inteligencia())
		assert.equals(12, ana.inteligencia())
		assert.equals(8, rosa.inteligencia())
		assert.equals(12, perla.inteligencia())
		assert.equals(20, monica.inteligencia())
		assert.equals(14, luisa.inteligencia())
	}
	
	test "personas: es destacada" {
		assert.notThat(julieta.esDestacada())
		assert.that(ana.esDestacada())
		assert.that(rosa.esDestacada())
		assert.notThat(perla.esDestacada())
		assert.that(monica.esDestacada())
		assert.notThat(luisa.esDestacada())
	}
	
	test "planeta: delegacion diplomatica" {
		assert.equals(#{ana, rosa, monica}, triton.delegacionDiplomatica())
	}
	
	test "planeta: valor inicial de defensa" {
		assert.equals(2, triton.valorInicialDefensa())
	}
	
	test "planeta: es planeta culto" {
		assert.notThat(triton.esCulto())
	}
	
	test "planeta: potencia real" {
		assert.equals(184, triton.potenciaReal())
	}
	
}


describe " test sobre escenario basico: perla" {
	const perla = new Atleta(edad = 28, cantidadTecnicas = 4, masaMuscular = 6)
	
	fixture {
		perla.entrenar(15)
		perla.aprenderTecnica()
	} 
	
	test "potencia" {
		assert.equals(65, perla.potencia())
	}
	
	test "es destacada" {
		assert.notThat(perla.esDestacada())
		
		perla.aprenderTecnica()
		assert.that(perla.esDestacada())
	}
	
}

// para verificar si hice bien
describe "tests aparte" {
	const julieta = new Persona(edad = 42)
	const ana = new Atleta(edad = 25)
	const rosa = new Atleta(edad = 45, cantidadTecnicas = 5)
	const perla = new Atleta(edad = 28, cantidadTecnicas = 3, masaMuscular = 5)
	const monica = new Docente(edad= 45, cantidadCursos = 6)
	const luisa = new Docente(edad= 35, cantidadCursos = 1)
	const triton = new Planeta(habitantes = #{julieta, ana, perla, rosa})
	const paleas = new Planeta(habitantes = #{luisa})
	const pistolete = new Pistolete(largo = 8)
	const espadon = new Espadon(peso = 20)
	const soldado1 = new Soldado(edad = 50, armas = #{pistolete, espadon})
	const soldado2 = new Soldado(edad = 24, armas = #{pistolete, espadon})
	
	test "potencia real" {
		assert.equals(123, triton.potenciaReal())
	}
	
	test "potencia aparente" {
		assert.equals(160, triton.potenciaAparente())
	}
	
	test "necesita reforzarse" {
		assert.notThat(triton.necesitaReforzarse())
	}
	
	test "antes y despues de recibir tributos" {
		assert.equals(0, triton.cantidadMuseos())
		assert.equals(0, triton.longitudMurallas())
		
		triton.habitantes([julieta, ana, perla, rosa, monica])
		triton.recibirTributos()
				
		assert.equals(1, triton.cantidadMuseos())
		assert.equals(6, triton.longitudMurallas())
	}
	
	test "valor" {
		assert.equals(28, julieta.valor())
		assert.equals(40, ana.valor())
		assert.equals(48, rosa.valor())
		assert.equals(47, perla.valor())
		
		triton.habitantes([julieta, ana, perla, rosa, monica])
		
		assert.equals(45, monica.valor())
	}
	
	test "habitantes valiosos" {
		assert.equals(#{ana, rosa, perla}, triton.habitantesValiosos() )
	}
	
	test "antes y despues de que triton apacigua paleas" {
		assert.equals(0, paleas.cantidadMuseos())
		assert.equals(0, paleas.longitudMurallas())
		
		triton.apaciguar(paleas)
		
		assert.equals(0, paleas.cantidadMuseos())
		assert.equals(6, paleas.longitudMurallas())
	}
	
	test "soldados y armas" {
		assert.equals(50, soldado1.potencia())
		assert.equals(46, soldado2.potencia())
	}
	
}